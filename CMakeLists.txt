cmake_minimum_required(VERSION 3.10)

project(bonjour-websocket
	VERSION 1.0.0
	DESCRIPTION "A Bonjour/Zeroconf multicast DNS example using QMdnsEngine and Qt WebSockets"
	LANGUAGES CXX)

# Run moc automatically when needed.
set(CMAKE_AUTOMOC ON)
# Do the same for qrc resources
set(CMAKE_AUTORCC ON)
# Do the same for ui resources
set(CMAKE_AUTOUIC ON)
# Find generated files (generated by above) in build directory
set(CMAKE_INCLUDE_CURRENT_DIR ON)

find_package(Qt5Core REQUIRED)
find_package(Qt5Widgets REQUIRED)
find_package(Qt5Network REQUIRED)
find_package(Qt5WebSockets REQUIRED)

set(LIBRARIES Qt5::Core
              Qt5::Widgets
              Qt5::Network
              Qt5::WebSockets)

add_subdirectory(lib/qmdnsengine)
list(APPEND LIBRARIES qmdnsengine)

set(CMAKE_EXPORT_COMPILE_COMMANDS on)

add_executable(server src/server/main.cpp src/common/servicerepository.cpp src/server/servicediscovery.cpp src/server/serversocket.cpp)
add_executable(client src/client/main.cpp src/common/servicerepository.cpp src/client/clientsocket.cpp src/client/mainwindow.cpp)

# Use c++17
set_property(TARGET server PROPERTY CXX_STANDARD 17)
set_property(TARGET server PROPERTY CXX_STANDARD_REQUIRED ON)
set_property(TARGET client PROPERTY CXX_STANDARD 17)
set_property(TARGET client PROPERTY CXX_STANDARD_REQUIRED ON)

target_link_libraries(server ${LIBRARIES})
target_link_libraries(client ${LIBRARIES})